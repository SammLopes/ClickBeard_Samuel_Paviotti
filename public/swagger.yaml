openapi: 3.0.0
info:
  title: API ClickBeard
  description: >-
    # Lumen PHP Framework - Clickbeard


    # API Clickbeard - Como Executar


    - Baixar as dependencias.
        
        ``` bash
            composer install
        
         ```
        
    - Configura seu banco de dados e rode o create database.
        
    - Crie o arquivo .env basedo no seu exemplo
        
        ``` .env
            #configure aqui    
            DB_CONNECTION=mysql
            DB_HOST=192.168.56.57   
            DB_PORT=3306
            DB_DATABASE=clickbeard_db
            DB_USERNAME=homestead
            DB_PASSWORD=secret
            JWT_SECRET=
        
         ```
        
    - Execute as migrations
        
        ``` bash
            php artisan migrate
        
         ```
        
    - Caso queira pode rodar as seeder que vão popular o banco de dados.
        
        ``` bash
            php artisan db:seed
        
         ```
        
    - Ou rodar os dois de uma vez
        
        ``` bash
            php artisan migrate --seed
        
         ```
        
    - Caso ja tenha usado o comando de migrate, pode recriar tudo e exeutar tudo
    denovo
        
        ``` bash
            php artisan migrate:fresh --seed
        
         ```
        
    - Cria o JWT SECRET, comando para criar o hash:
        
    - Pode ser criado de duas formas usando openssl ou php
        
    - OpenSSL, presente no terminal do Git bash
        
        ``` bash
            openssl rand -hex 32
        
         ```
        
    - Com php dessa forma
        
        ``` bash
            php -r "echo bin2hex(random_bytes(32)) . PHP_EOL;"
        
         ```
        
    - Ambos os comandos geran um hash como esse:
        
        ``` bash
          ec6f775c0e1270947013c5d2a912b5df062aa35d4d3e681b176fb81976579750
        
         ```
        
    - Basta pegar esse hash e colocar no JWT_SECRET dentro do .env
        
    - Use o servidor embutido do php para executar a aplicação
        
        ``` bash
            php -S localhost:8001 -t ./public
        
         ```
        
    - Lembre-se de configurar o timezone da aplicação no .env, coloque
    `America/Sao_Paulo`.
  version: 1.0.0
servers:
  - url: http://{{url}}
  - url: http://localhost:8001
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    noauthAuth:
      type: http
      scheme: noauth
security:
  - bearerAuth: []
tags:
  - name: Auth
    description: >-
      São rotas protegidas, requetem autenticação JWT, qualquer rota fora dessa
      seção de Auth são rotas públicas.
  - name: Auth > Admin
    description: >-
      Seção de admin, qualquer rota que estiver dentro desta seção é
      funcionalidade de admin.
  - name: Auth > Admin > Scheduling
    description: Seção de agendamento manipulda somente pleo admin.
  - name: Auth > Admin > Barbers
    description: >-
      Rota autenticada de cadastro de barbeiros, somente o admin pode ter acesso
      a essas funcionaliades.
  - name: Auth > Admin > Speciality
    description: >-
      Pasta relacionado a entidade especialidade voltadas para os
      administradores
  - name: Auth > Admin > Services
    description: >-
      Seção voltada para entidade de serviços, essas rotas são permitidas
      somente para os admins.
  - name: Auth > Sheduling
  - name: Barbers
    description: Seção de rotas públicas dos barbeiros.
  - name: Services
    description: Rota da entidade de serviçoes públicas.
  - name: Speciality
    description: Seção onde fica as rotas públicas da entidade de especialidades.
paths:
  /admin/scheduling/today:
    get:
      tags:
        - Auth > Admin > Scheduling
      summary: Scheduling Today
      description: Busca todos os agendamentos no dia corrente.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/scheduling/future:
    get:
      tags:
        - Auth > Admin > Scheduling
      summary: Scheduling  Future
      description: Busca todos os agendamentos futuros.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/scheduling/date/{date}:
    get:
      tags:
        - Auth > Admin > Scheduling
      summary: Scheduling By Date
      description: Busca agendamento por data.
      security:
        - bearerAuth: []
      parameters:
        - name: ''
          in: header
          schema:
            type: string
        - name: date
          in: path
          schema:
            type: string
          required: true
          example: '2025-06-20'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/barbers/:
    post:
      tags:
        - Auth > Admin > Barbers
      summary: Barber store
      description: Realiza a criação d eum registro de um barbeito.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Carlos Ferreira
                email: carlos.123ferreira@example.com
                phone: (11) 98765-4321
                age: 30
                hire_date: '2020-06-15'
                specialties:
                  - specialty_id: 1
                    experience_years: 5
                    is_primary: true
                  - specialty_id: 2
                    experience_years: 2
                    is_primary: false
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/barbers/{id}:
    put:
      tags:
        - Auth > Admin > Barbers
      summary: Barber update
      description: Realiza a atualização de algum registro do barbeiro.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Carlos F. Silva
                email: carlos.silva@example.com
                phone: (11) 91234-5678
                age: 31
                hire_date: '2020-06-15'
                is_active: true
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '7'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/barbers/{id}/specialties:
    post:
      tags:
        - Auth > Admin > Barbers
      summary: Store Specialties by Barber
      description: >-
        Rota responsável pela adição de uma especialidade a um barbeiro dado o
        id do dele e o id da especialidade.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                specialty_id: 2
                experience_years: 4
                is_primary: true
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Id do barbeiro
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Auth > Admin > Barbers
      summary: Delete Specialties by Barber
      description: >-
        Rota para remoção de uma espcialidade dado o id do barbeiro e o id da
        especialidade.
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Id do barbeiro
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/specialties:
    post:
      tags:
        - Auth > Admin > Speciality
      summary: Specialities Store
      description: Realiza o registro uma espcialidade.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Corte Fade
                description: Corte tradicional ou moderno para homens.
                is_active: true
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/specialties/{id}:
    put:
      tags:
        - Auth > Admin > Speciality
      summary: Specialties update
      description: Realiza a atualização de uma especialidade dado seu id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Design de Sobrancelhas
                description: Corte tradicional ou moderno para homens.
                is_active: true
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '10'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Auth > Admin > Speciality
      summary: Specialties delete
      description: |-
        Rota para deletar uma especialidade.

        Regras:

        - Não se pode deletar uma especialidade vinculada a um barbeiro.
            
        - Não se pode deletar um especialidade vinculado a um serviço.
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/x-www-form-urlencoded
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '9'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/services:
    post:
      tags:
        - Auth > Admin > Services
      summary: Services post
      description: >-
        Rota para adicionar o registro de um serviço associado a uma
        especialidade.


        Regras:


        - Para registrar um serviço a especialidade tem que existir.
            
        - Para registrar um serviço a especialidade precisa estar ativa.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Barba e Bigode Tradicional
                description: Aparagem com navalha e finalização com toalha quente.
                specialty_id: 2
                price: 35
                duration_minutes: 25
                is_active: true
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/services/{id}:
    put:
      tags:
        - Auth > Admin > Services
      summary: Services update
      description: |-
        Rota usada para altear um registro de um serviço dado seu id.

        Regras:

        - Para registrar um serviço a especialidade tem que existir.
            
        - Para registrar um serviço a especialidade precisa estar ativa.
            
        - Não é possivel desativar um serviço com com agendamentos futuros.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Corte Tradicional
                description: Aparagem com navalha.
                specialty_id: 7
                price: '35.00'
                duration_minutes: 25
                is_active: true
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Id do serviço
          example: '8'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Auth > Admin > Services
      summary: Service delete
      description: >-
        Rota para deletar um servoço resgitrados dado seu id.


        Regras:


        - Pode deletar um serviço caso nçao tenha nenhum agendamento relacionado
        a o serviço.
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '8'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /scheduling:
    get:
      tags:
        - Auth > Sheduling
      summary: Scheduling
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Auth > Sheduling
      summary: Scheduling Store
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                barber_id: 1
                service_id: 1
                scheduling_date: '2025-06-21'
                scheduling_time: '16:30'
                notes: Quero um corte moderno
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /scheduling/{id}:
    get:
      tags:
        - Auth > Sheduling
      summary: Scheduling by Id
      description: Busca agendamento por id.
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Auth > Sheduling
      summary: Scheduling Update
      description: Realiza a alterações do registro de um agenamento.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                barber_id: 1
                service_id: 1
                scheduling_date: '2025-06-22'
                scheduling_time: '11:00'
                status: cancelled
                notes: Quero um corte moderno
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Id do agendamento
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /scheduling/{id}/confirm:
    put:
      tags:
        - Auth > Sheduling
      summary: Scheduling Confirm
      description: |-
        Alterar um agendamento para confirmado.

        Regras:

        - Apenas agendamentos marcados com scheduled podem ser confirmados.
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '9'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /scheduling/{id}/cancel:
    put:
      tags:
        - Auth > Sheduling
      summary: Scheduling Cancel
      description: >-
        Alterar um agendamento para cancelado. Pode colocar uma motivo para o
        cancelamento, sendo opcional.


        Regras:


        - Não é possivel cancelar um agendamento já cancelado.
            
        - Não é possivel cancelar um agendamento ja completo.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                reason: Compromisso ugente no outro dia
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '6'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /scheduling/{id}/complete:
    put:
      tags:
        - Auth > Sheduling
      summary: Scheduling Complete
      description: |-
        Altera um agendamento para concluido.

        Regras:

        - Não é possivel marcar como completo agendamentos que estão cancelados.
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '9'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: >-
        Realiza o login da plataforma retornando informações do cliente
        cadastrado e o token para o cliente.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: cliente@barbearia.com
                password: '1234'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register Client
      description: Realiza o resgistro de um cliente
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Samuel
                email: samuel@tosko.com
                password: '123456'
      security:
        - noauthAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/me:
    get:
      tags:
        - Auth
      summary: me
      description: Essa rota retorna o usário logado.
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout
      description: Rota que realiza o logout do usuário.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /available-slots:
    get:
      tags:
        - Auth
      summary: Date Available
      description: >-
        Buscas datas liberadas para relaizar o agendamento. Dado como parametros
        o id do barbeiro e a data ele verifica se tem horários livres.
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: barber_id
          in: query
          schema:
            type: integer
          example: '1'
        - name: date
          in: query
          schema:
            type: string
          example: '2025-06-23'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /barbers-by-specialty:
    get:
      tags:
        - Auth
      summary: barbers by Specialty
      description: Busca de babrbeiros por especialidade.
      security:
        - bearerAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: specialty_id
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /barbers:
    get:
      tags:
        - Barbers
      summary: Barbers
      description: Busca uma lista de barbeiros cadastrados.
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /barbers/{id}:
    get:
      tags:
        - Barbers
      summary: Barbers by id
      description: Busca de barbeiros por id.
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /barbers/specialty/{id}:
    get:
      tags:
        - Barbers
      summary: Barber by Specialty
      description: >-
        Busca barbeiros por especialidade. Dado o id da especialidade ele
        retorna uma lista de barbeiros.
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Id da especialidade.
          example: '5'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /services/{id}:
    get:
      tags:
        - Services
      summary: Services by id
      description: Busca de serviçoes por id.
      security:
        - noauthAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /services:
    get:
      tags:
        - Services
      summary: Services
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /services/specialty/{id}:
    get:
      tags:
        - Services
      summary: Services by Specialty
      description: Busca de serviços por especialidade, dado o id dessa especialidade.
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Id especialidade
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /specialties:
    get:
      tags:
        - Speciality
      summary: Specialites
      description: Rota que lista todos os serviçoes cadastrados.
      security:
        - noauthAuth: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /specialties/10:
    get:
      tags:
        - Speciality
      summary: Specialities by id
      description: Busca por id uma especialidadade específica.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
